name: CI

on: pull_request

env:
  CARGO_TERM_COLOR: always

jobs:
  build-cli:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
        working-directory: cli
    strategy:
      matrix:
        include:
        - build: x86_64-linux
          os: ubuntu-latest
        - build: x86_64-macos
          os: macos-latest
        - build: aarch64-macos
          os: macos-latest
          target: aarch64-apple-darwin
        - build: x86_64-windows
          os: windows-latest
        - build: aarch64-linux
          os: ubuntu-latest
          target: aarch64-unknown-linux-gnu
        - build: s390x-linux
          os: ubuntu-latest
          target: s390x-unknown-linux-gnu
    steps:
    - uses: actions/checkout@v2
    # So that windows uses StrawberryPerl which uses windows path separators
    - run: rm /usr/bin/perl
      if: matrix.build == 'x86_64-windows'
    - uses: Swatinem/rust-cache@v2
      with:
        workspaces: "cli"
    - name: Build
      run: cargo build --release --verbose
    - run: ../ci/build-tarballs.sh "${{ matrix.build }}"
    - uses: actions/upload-artifact@v3
      with:
        name: bins-${{ matrix.build }}
        path: cli/dist
  
  build-test-artifacts:
    name: Build test artifacts
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: tests
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: "tests"
      - name: Install nextest
        uses: taiki-e/install-action@nextest
      - name: Build and archive tests
        run: cargo nextest archive --archive-file nextest-archive.tar.zst
      - name: Upload archive to workflow
        uses: actions/upload-artifact@v3
        with:
          name: nextest-archive
          path: tests/nextest-archive.tar.zst

  rustfmt-cli:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: cli
    steps:
    - uses: actions/checkout@v2
    - run: rustup update stable --no-self-update
    - run: rustup default stable
    - run: rustup component add rustfmt
    - run: cargo fmt --all -- --check

  test-examples:
    runs-on: ubuntu-latest
    needs: [build-test-artifacts, build-cli]
    strategy:
      matrix:
        language: ['rust', 'javascript']
    defaults:
      run:
        shell: bash
        working-directory: examples/${{ matrix.language }}
    steps:
    - uses: actions/checkout@v2
    - run: rustup update stable --no-self-update
    - run: rustup default stable
    - uses: actions/download-artifact@v3
      with:
        name: bins-x86_64-linux
        path: cli/dist
    - name: Install nextest
      uses: taiki-e/install-action@nextest
    - name: Download archive
      uses: actions/download-artifact@v3
      with:
        name: nextest-archive
    - uses: fastly/compute-actions/setup@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - run: |
        [ -f package.json ] && (cd ../../libraries/javascript && npm i) && npm i
        fastly compute build
        fastly compute serve &
        sleep 60
        TEST_HOST='http://localhost:7676' ~/.cargo/bin/cargo-nextest nextest run --archive-file ../../nextest-archive.tar.zst